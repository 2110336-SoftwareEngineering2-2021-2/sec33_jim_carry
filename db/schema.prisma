// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  citizenId      String?
  name           String?
  email          String   @unique
  hashedPassword String?
  googleId       String?  @unique
  profileImage   String?
  omiseId        String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Role     @default(USER)
  totalBalance   Float    @default(1000)

  shop         Shop?
  addresses    Address[]
  wishlist     Product[]     @relation(name: "wishlist")
  shoppingCart Product[]     @relation(name: "shoppingCart")
  following    Shop[]        @relation(name: "follow")
  tokens       Token[]
  sessions     Session[]
  Order        Order[]
  chats        ChatMember[]
  messages     Message[]
  Transaction  Transaction[]
  reviews      Review[]
}

model Shop {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  bio       String?
  phoneNo   String?
  name      String
  image     String?
  rating    Float?
  totalSale Int     @default(0)

  products  Product[]
  followers User[]    @relation(name: "follow")
  Order     Order[]
  reviews   Review[]
}

model Address {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  name         String
  receiverName String
  address      String
  phoneNo      String
  note         String?
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    Int

  name        String
  description String?
  price       Float
  soldPrice   Float?
  stock       Int
  hidden      Boolean
  images      String[]

  categories        Category[]
  hashtags          String[]
  wishlistedBy      User[]              @relation(name: "wishlist")
  selectedBy        User[]              @relation(name: "shoppingCart")
  OrderItemSnapshot OrderItemSnapshot[]
  reviews           Review[]
}

model CategoryGroup {
  id   Int    @id @default(autoincrement())
  name String

  categories Category[]
}

model Category {
  id      Int           @id @default(autoincrement())
  group   CategoryGroup @relation(fields: [groupId], references: [id])
  groupId Int

  name String

  products Product[]
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    Int

  status     OrderStatus         @default(PENDING)
  totalPrice Float
  chargeId   String?
  items      OrderItemSnapshot[]
  reviewed   Boolean             @default(false)

  address         String
  addressNote     String?
  receiverName    String
  receiverPhoneNo String
  Transaction     Transaction[]
}

model OrderItemSnapshot {
  id      Int   @id @default(autoincrement())
  Order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  name        String
  description String?
  price       Float
  soldPrice   Float
  images      String[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  rating  Float
  title   String
  comment String
}

model Chat {
  id            Int          @id @default(autoincrement())
  memberships   ChatMember[]
  membershipIds Int[]

  messages Message[]
}

model Message {
  id       Int  @id @default(autoincrement())
  chat     Chat @relation(fields: [chatId], references: [id])
  chatId   Int
  sender   User @relation(fields: [senderId], references: [id])
  senderId Int

  content   String
  createdAt DateTime @default(now())

  @@index(createdAt)
}

model ChatMember {
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  isShop            Boolean
  lastMessageReadId Int?

  // composite primary key
  @@id([chatId, userId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Transaction {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  amount    Float
  type      TransactionType

  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  Order       Order?  @relation(fields: [orderId], references: [id])
  orderId     Int?
  bank        String?
  bankAccount String?
}

enum TokenType {
  RESET_PASSWORD
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  WITHDRAW
  ORDER
}
